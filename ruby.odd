<?xml version="1.0" encoding="utf-8"?>
<!-- $Id: ruby.odd 3426 2021-01-08 23:51:50Z syd $ -->
<TEI xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>Ruby</title>
        <title type="sub">a TEI customization to demonstrate encoding
        of ruby annotations</title>
        <sponsor>East Asian / Japanese SIG</sponsor>
        <author>
          <persName>Kazuhiro Okada</persName>
          <persName>Satoru Nakamura</persName>
          <persName>Kiyonori Nagasaki</persName>
        </author>
        <respStmt>
          <resp>In cooperation with</resp>
          <persName>So Miyagawa</persName>
          <persName>Yifan Wang</persName>
          <persName>Nobutake Kamiya</persName>
          <persName>Naoki Kokaze</persName>
          <persName>Martin Holmes</persName>
          <persName>Syd Bauman</persName>
        </respStmt>
      </titleStmt>
      <publicationStmt>
        <ab>Intended for internal TEI use.</ab>
        <availability>
          <licence target="https://creativecommons.org/licenses/by-sa/4.0/">
            <choice>
              <abbr>CC BY-SA 4.0</abbr>
              <expan>Attribution-ShareAlike 4.0 International</expan>
            </choice>
          </licence>
        </availability>
      </publicationStmt>
      <sourceDesc>
        <p>Born digital, based heavily on the ODD snippets in <ref
        target="https://docs.google.com/document/d/1rRgBRYpxUlsnMEHbOPW-92u_AIMNwq9axGtpI1UGgz8">Proposal
        to add <gi>ruby</gi>, <gi>rb</gi>, and <gi>rt</gi> to encode
        ruby glosses for Japanese texts ルビ符号化要素（<gi>ruby</gi>，
        <gi>rb</gi>，<gi>rt</gi>）の追加申請</ref> as of <date
        when="2020-10-25">25 Oct 20</date>.</p>
      </sourceDesc>
    </fileDesc>

    <revisionDesc>
      <change who="#SB" when="2021-01-15">
	<list>
	  <item>Martin Holmes and I noticed that <att>target</att> was
	  inadvertently a required attribute of <gi>rt</gi>;
	  fixed.</item>
	  <item>Martin believes (strongly) that a <gi>ruby</gi> should
	  have only 1 child <gi>rb</gi>, and I do not disagree
	  (although I also do not claim sufficient expertise to be
	  sure). Since it is <emph>far</emph> easier to change a “1
	  only” rule to “many allowed” than vice-versa, we are limiting
	  the content model to <code> rb, rt+ </code>.</item>
	</list>
      </change>      
      <change who="#SB" when="2021-01-08">
	With Martin Holmes, added <att>target</att> to <gi>rt</gi> for
	pointing to a container element rather than empty booundaries
	(<gi>anchor</gi>), including constraint that <att>target</att>
	not be used with either <att>from</att> or <att>to</att>. Also
	changed the constraint specs to require <att>to</att> iff
	<att>from</att>. (We already had constraint requiring
	<att>from</att> iff <att>to</att>.)</change>
      <change who="#SB" when="2021-01-08">
	Convinced by Martin Holmes to permit <gi>ruby</gi> inside
	<gi>w</gi>, so changed the content model of <gi>w</gi>.
      </change>
      <change who="#SB" when="2020-10-25">
        Inspired by the presentation by the authors at today’s
        (virtual) TEI Council meeting, I took it upon myself to
        generate an actual ODD from the snippets in their proposal.
        Major changes (that I can remember):
        <list>
          <item>Made <gi>ruby</gi> a member of model.phrase (it makes
          no sense to declare membership in a macro)</item>
          <item>Changed namespace to something more official (y’all
          deserve it)</item>
          <item>Re-worded descriptions a bit</item>
          <item>Eliminated model.rubyPart, as it was unused</item>
          <item>Eliminated model.rubyLike, as it did not do much — this
          may be a controversial change</item>
          <item>Fixed constraint requiring <att>to</att> iff
          <att>from</att></item>
        </list>
        I did NOT change the names of the <att>to</att> and
        <att>from</att> attributes, which already have uses in TEI. I
        would prefer to see <att>kara</att> and either <att>ni</att>
        or <att>mukatte</att> or some such. I also did NOT change the
        content model of <gi>ruby</gi>, but I did add a comment
        detailing the model to be used if we wish to disallow <code>
        rb, rb+, rt, rt+ </code> (that is, if we do not want a
        <gi>ruby</gi> to contain more than one <gi>rb</gi> AND more
        than one <gi>rt</gi>).
      </change>
    </revisionDesc>
    </teiHeader>

    <text>
    <body>
      <div type="section">
        <head>Summary</head>
        <p xml:lang="en" corresp="#n" xml:id="p">The ruby gloss, or
        rubi, or furigana, is a device for giving guidance on
        phonation, as well as presenting another reading for the text,
        which sometimes can be an essential part of the text. The
        structure of ruby glosses has, until recently, been
        established between characters and glosses, rather than words
        and glosses, since over a millennium ago. Such a textual
        structure requires another layer of semantics besides the
        existing set of vocabulary, such as <gi>seg</gi>,
        <gi>note</gi> (or <gi>add</gi>) and <gi>span</gi>. In its
        centuries of history, ruby glosses can also be double-sided.
        Reflecting on the current encoding schema in HTML5, this
        proposal discusses encoding examples attested in real texts,
        taking Taiwanese Bopomofo into consideration.</p>
        <p xml:lang="ja" corresp="#p" xml:id="n">ルビ（振り仮名）は、
        発音の手がかりを与える手段である一方、あらたな読解をテクストに
        与えることも多く、むしろ、それが本体であることすらあった。ルビ
        の構造は、ながらく本行の文字と振られる文字の関係を本位とし、単
        語本位ではなかった。このテクストの構造は、既存の語彙、たとえば
        <gi>seg</gi>、<gi>note</gi>（あるいは<gi>add</gi>）と
        <gi>span</gi>の組み合わせのような意味論では捉えられず、あらた
        な把握を要する。また長い歴史の中では、ルビはテクストの両側に付
        されることもあった。既存のHTMLでの符号化スキーマを参考にしつつ、
        この提案では、実例をもとに符号化の例を検討し、台湾の注音符号に
        及ぶ。</p>
      </div>
    </body>
    <back>
      <schemaSpec
          xmlns:sch="http://purl.oclc.org/dsdl/schematron" prefix="r_"
          xmlns:r="http://www.tei-c.org/ns/proposal/ruby" ident="ruby"
          source="tei:4.1.0" start="TEI div p ab" >
        <desc>From proposal, then tweaked</desc>

        <moduleRef key="tei"/>                              <!-- required -->
        <moduleRef key="core"/>                             <!-- required -->
        <moduleRef key="analysis"/>
        <moduleRef key="certainty"/>
        <moduleRef key="corpus"/>
        <moduleRef key="dictionaries"/>
        <moduleRef key="drama"/>
        <moduleRef key="figures"/>
        <moduleRef key="gaiji"/>
        <moduleRef key="header"/>                           <!-- required -->
        <moduleRef key="iso-fs"/>
        <moduleRef key="linking"/>
        <moduleRef key="msdescription"/>
        <moduleRef key="namesdates"/>
        <moduleRef key="nets"/>
        <moduleRef key="spoken"/>
        <moduleRef key="textcrit"/>
        <moduleRef key="textstructure"/>                    <!-- required -->
        <moduleRef key="transcr"/>
        <moduleRef key="verse"/>
        
        <elementSpec ident="ruby" ns="http://www.tei-c.org/ns/proposal/ruby" mode="add">
          <desc versionDate="2020-02-28" xml:lang="en">contains a
          passage of text along with its associated ruby gloss.</desc>
          <classes>
            <memberOf key="att.global"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.phrase"/>
          </classes>
          <content>
            <elementRef key="rb" minOccurs="1" maxOccurs="1"/>
            <elementRef key="rt" minOccurs="1" maxOccurs="unbounded"/>
          </content>
          <!-- Obviously need <exemplum>s here :-) -->
        </elementSpec>

        <elementSpec ident="rt" ns="http://www.tei-c.org/ns/proposal/ruby" mode="add">
          <desc versionDate="2020-02-28" xml:lang="en">contains a ruby
          text, an annotation closely associated with a passage of the
          main text.</desc>
          <classes>
            <memberOf key="att.global"/>
            <memberOf key="att.typed"/>
            <memberOf key="att.placement"/>
          </classes>
          <content>
            <alternate minOccurs="1" maxOccurs="unbounded">
              <classRef key="macro.phraseSeq"/>
              <classRef key="model.segLike"/>
            </alternate>
          </content>
	  <attList>
	    <attDef ident="target" usage="opt">
	      <desc versionDate="2021-01-08" xml:lang="en">supplies a pointer to the
	      base being glossed by this ruby text</desc>
	      <datatype><dataRef key="teidata.pointer"/></datatype>
	      <constraintSpec scheme="schematron" ident="rt-target-not-span">
                <!-- Note: this constraint should not be necessary, as
                     the desired semantics should be something we
                     could describe in PureODD using attList/@org. But
                     I don’t think we can. —Syd -->
		<desc>Enforce that <emph>either</emph>
		<att>target</att> or both <att>from</att> and
		<att>to</att> (or none) are used, but not
		<att>target</att> in combination with either
		<att>from</att> or <att>to</att>.</desc>
		<constraint>
		  <sch:report test="../@from | ../@to">When target= is
		  present, neither from= nor to= should be.</sch:report>
		</constraint>
	      </constraintSpec>
	      <remarks>
		<p>Should point to a single <gi>rb</gi> or an element
		that is inside an <gi>rb</gi>. To refer to multiple
		base characters at once use <att>from</att> and
		<att>to</att>.</p>
	      </remarks>
	    </attDef>
	    <attDef ident="from" usage="opt" mode="add">
	      <desc>points to the starting point of the span of text
	      being glossed.</desc>
	      <datatype>
		<dataRef key="teidata.pointer"/>
	      </datatype>
	      <constraintSpec scheme="schematron" ident="rt-from">
                <!-- Note: this constraint should not be necessary, as
                     the desired semantics should be something we
                     could describe in PureODD using attList/@org. But
                     I don’t think we can. —Syd -->
                <desc>Enforce the presence of <att>to</att> iff there
                is a <att>from</att>.</desc>
                <constraint>
                  <sch:assert test="../@to" >When from= is present, the to=
                  attribute of <sch:name/> is required.</sch:assert>
                </constraint>
              </constraintSpec>
            </attDef>
            <attDef ident="to" usage="opt" mode="add">
              <desc>points to the ending point of the span of text
              being glossed.</desc>
              <datatype>
                <dataRef key="teidata.pointer"/>
              </datatype>
	      <constraintSpec scheme="schematron" ident="rt-to">
                <!-- Note: this constraint should not be necessary, as
                     the desired semantics should be something we
                     could describe in PureODD using attList/@org. But
                     I don’t think we can. —Syd -->
                <desc>Enforce the presence of <att>from</att> iff there
                is a <att>to</att>.</desc>
                <constraint>
                  <sch:assert test="../@from" >When to= is present, the from=
                  attribute of <sch:name/> is required.</sch:assert>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </elementSpec>

        <elementSpec ident="rb" ns="http://www.tei-c.org/ns/proposal/ruby" mode="add">
          <desc versionDate="2020-02-28" xml:lang="en">contains the
          annotation portion of a ruby gloss.</desc>
          <classes>
            <memberOf key="att.global"/>
            <memberOf key="att.typed"/>
          </classes>
          <content>
            <alternate minOccurs="1" maxOccurs="unbounded">
              <classRef key="macro.phraseSeq"/>
              <classRef key="model.segLike"/>
            </alternate>
          </content>
	</elementSpec>

	<elementSpec ident="w" module="analysis" mode="change">
	  <content>
	    <alternate minOccurs="0" maxOccurs="unbounded">
	      <textNode/>
	      <classRef key="model.gLike"/>
	      <elementRef key="seg"/>
	      <elementRef key="w"/>
	      <elementRef key="m"/>
	      <elementRef key="c"/>
	      <elementRef key="pc"/>
	      <elementRef key="ruby"/>
	      <classRef key="model.global"/>
	      <classRef key="model.lPart"/>
	      <classRef key="model.hiLike"/>
	      <classRef key="model.pPart.edit"/>
	    </alternate>
	  </content>
	</elementSpec>

      </schemaSpec>
    </back>
  </text>
</TEI>
